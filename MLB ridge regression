# Get data from API in JSON format

import pandas as pd
import requests
import numpy as np
from operator import delitem
import csv
from sklearn.metrics import accuracy_score
from sklearn.linear_model import Ridge

url = "https://v1.baseball.api-sports.io/games?league=1&season=2022"

payload={}
headers = {
  'x-rapidapi-key': '1ae57e7a748cd2bb05d6fd7321c4747a',
  'x-rapidapi-host': 'v1.baseball.api-sports.io'
}

response = requests.request("GET", url, headers=headers, data=payload)

data = response.json()

y = data.get('response')


# Function to parse JSON

def game_results(num):
  
  y = data.get('response')
  x = (y[num]).get('teams')

  a = x.get('away')
  b = x.get('home')

  away_team = a.get('name')
  home_team = b.get('name')


  z = (y[num]).get('scores')

  c = z.get("home")
  d = z.get('away')

  home_score = c.get('total')
  away_score = d.get('total')



  return(home_team,home_score, away_team, away_score)
  
  
  
# Write function data to csv ( make a blank file called 'data.csv')
  
  
  csv_file = open("data.csv", 'w')

csv_writer = csv.writer(csv_file, delimiter=",")

for i in range(len(y)):
  csv_writer.writerow(game_results(i))

csv_file.close()


# Getting CSV data into Data Frame (last 2 lines needed in some years)

df = pd.read_csv('data.csv')

df.columns = ['home', 'home_runs', 'away','away_runs']

df['run_difference'] = df['home_runs'] - df['away_runs']

df['home_win'] = np.where(df['run_difference'] < 0,1,0)
df['home_loss'] = np.where(df['run_difference'] > 0,1,0)


df_visitor = pd.get_dummies(df['away'], dtype=np.int64)
df_home = pd.get_dummies(df['home'], dtype=np.int64)


df_model = df_home.sub(df_visitor)
df_model['run_difference'] = df['run_difference']


#df_model = df_model.drop('American League', axis=1)
#df_model = df_model.drop('National League', axis=1)



# Function to clean data

def clean_dataset(df):
    assert isinstance(df, pd.DataFrame), "df needs to be a pd.DataFrame"
    df.dropna(inplace=True)
    indices_to_keep = ~df.isin([np.nan, np.inf, -np.inf]).any(1)
    return df[indices_to_keep].astype(np.float64)


df_model = clean_dataset(df_model)


# Training ridge regression

df_train = df_model

lr = Ridge(alpha=0.001) 
X = df_train.drop(['run_difference'], axis=1)

y = df_train['run_difference']


lr.fit(X,y)


# Show sorted coefficents

df_ratings = pd.DataFrame(data={'team': X.columns, 'rating': lr.coef_})
df_ratings.sort_values(by=['rating'], ascending=False)


# function to predict winner


def predicted_winner(team_1, team_2):
  
  valid_teams = {'New York Yankees', 'Toronto Blue Jays', 'New York Mets', 'Los Angeles Dodgers',
                   'St.Louis Cardinals',
                   'Boston Red Sox', 'Houston Astros', 'Texas Rangers', 'Los Angeles Angels', 'San Francisco Giants',
                   'Philadelphia Phillies', 'Miami Marlins', 'Atlanta Braves', 'San Diego Padres', 'Minnesota Twins',
                   'Tampa Bay Rays', 'Cleveland Guardians', 'Seattle Mariners', 'Milwaukee Brewers',
                   'Arizona Diamondbacks',
                   'Cincinnati Reds', 'Baltimore Orioles', 'Chicago White Sox', 'Chicago Cubs', 'Colorado Rockies',
                   'Detroit Tigers', 'Oakland Athletics', 'Kansas City Royals', 'Washington Nationals',
                   'Pittsburgh Pirates'

                   }
  if team_1 and team_2 not in valid_teams:
        raise ValueError("results: status must be one of %r." % valid_teams)
  
  
  team_1_rating = df_ratings.iloc[df_ratings[df_ratings['team']== team_1].index.values.astype(int)[0]]['rating']
  team_2_rating = df_ratings.iloc[df_ratings[df_ratings['team']== team_2].index.values.astype(int)[0]]['rating']

  if team_1_rating > team_2_rating:
    print('The', team_1, 'rating is', round(team_1_rating, 3),'.','The', team_1, "are rated", round((team_1_rating- team_2_rating),3), 'points higher than the', team_2,'.' )
  else:
    print('The', team_2, 'rating is', round(team_2_rating, 3),'.','The', team_2, "are rated", round((team_2_rating- team_1_rating),3), 'points higher than the', team_1,  )



predicted_winner('Washington Nationals', 'Philadelphia Phillies')

#return : The Philadelphia Phillies rating is 0.546 . The Philadelphia Phillies are rated 1.865 points higher than the Washington Nationals







